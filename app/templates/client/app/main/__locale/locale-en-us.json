{
    "LANGUAGE_SELECT": "English",
    "LOCALIZATION_HEADER": "Example for translation in baboon!",
    "LOCALIZATION_INTRO": "In baboon we use the module angular-translate for the tranaltion. We will show you some examples. A detailed documentation can be found here:",
    "LOCALIZATION_LINK": "Angular-Translate documentation",
    "Q1": "How to configure the translation?",
    "Q1_TEXT": "The translation is configured in the config area of the angular app. We use static files. They are located in the folder public/locale. The files are stored with a name-schema locale-langKey.json. For example, locale-de.json === german locale file, locale-en.json === english locale file. Angular-translate loads the language files from the server on demand. The default and fallback language is english.",
    "Q2": "How can the user change his language?",
    "Q2_TEXT": "The user can change the language at runtime (see buttons above). Then the language is stored in the session.",
    "Q3": "How to store the users language?",
    "Q3_TEXT": "In the baboon admin area you can store the default language of the user. When the app starts, this default language is saved in the session on the server. The client app then loads the language from the session.",
    "Q4": "How to configure the date, number and currency formatting?",
    "Q4_TEXT": "For the date, number and currency formatting we use the internationalization and localization feature of angularjs in conjunction with the module angular-dynamic-locale. Required modules:",
    "Q4_TEXT2": "In the config area of the angular app the search pattern of localization files is set. The part '{{locale}}' is a placeholder for the current selected language.",
    "Q4_TEXT3": "In the run area of the angular app we respond to the $translateChangeSuccess event which is triggered by angular-translate after the language is changed successfully. We passed angular-dynamic-locale the current language and this will, if necessary, dynamically loaded from the server.",
    "LOCALIZATION_GERMANY": "Germany",
    "NUMBER_FORMAT": "Number format",
    "CURRENCY_FORMAT": "Currency format",
    "DATE_FORMAT": "Date format",
    "SESSION_HEADER": "Example for sessions in Baboon",
    "SESSION_INTRO": "Sessions are produced in Baboon from the server and managed with the parameters from the config.js. The baboon-client module bbc.session includes a service that can interact on the server with the session. Which can be used to report to the server activity and to store data from the client in the session.",
    "SESSION_LIST_HEADER": "Methods of the Session Services",
    "SESSION_LIST_1": "Report activity session",
    "SESSION_LIST_2": "Check Recent Activity",
    "SESSION_LIST_3": "Store data in the session",
    "SESSION_LIST_4": "Load data from the session",
    "SESSION_LIST_5": "Delete data from the session",
    "SESSION_SETACTIVITY_HEADER": "Reports new activity to the server",
    "SESSION_SETACTIVITY_TEXT": "Report activity on the server. The server checks the session on inactivity and maximum service life. If one of these times are exceeded, the server sends the client in the callback an error. If the session ok, the server uses the current server time and stores it as the last activity.",
    "SESSION_GETLASTACTIVITY_HEADER": "Check Latest activity session",
    "SESSION_GETLASTACTIVITY_TEXT": "The last activity of the session to query. The session will not be checked again and set no new activity. It is returned a formatted in ISO date string.",
    "SESSION_SETDATA_HEADER": "Store data in the Session Container",
    "SESSION_SETDATA_TEXT": "You can save on the session service from the client data in the server session. Baboon used to store the container in the session data. All data from the client are stored within the container session.data and can be read and deleted only from this. Is the Key in the session already exists, the old value is overwritten.",
    "SESSION_GETDATA_HEADER": "Read data from the session container",
    "SESSION_GETDATA_TEXT": "You can read out data from the server session using the session service by the client. Use the key with which you have the data stored. You can import data that are outside of the container, do not read.",
    "SESSION_GETDATA_TEXT2": "If you do not enter a key, you the entire session container object is returned.",
    "SESSION_DELETEDATA_HEADER": "Delete data from the Session Container",
    "SESSION_DELETEDATA_TEXT": "The session service can delete from the client data from the server session. Use the key under which you have saved the data. You can import data that are outside of the container, do not delete.",
    "SESSION_DELETEDATA_TEXT2": "If you do not enter a key, the entire session container object is deleted."
}