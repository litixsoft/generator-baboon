{
    "LANGUAGE_SELECT": "Deutsch",
    "LOCALIZATION_HEADER": "Beispiel für die Übersetzung in baboon!",
    "LOCALIZATION_INTRO": "Für die Übersetzung in baboon verwenden wir angular-translate. Es folgen ein paar einfache Beispiele. Eine ausführliche Dokumentation findet man hier:",
    "LOCALIZATION_LINK": "Angular-Translate Dokumentation",
    "Q1": "Wie wird die Übersetzung konfiguriert?",
    "Q1_TEXT": "Im config Bereich der Angular app wird die Übersetzung konfiguriert. Wir verwenden für die Übersetzung statische Dateien. Diese befinden sich im Ordner public/locale. Die einzelnen Dateinen sind nach dem Namens-Schema locale-langKey.json gespeichert. Z.B. locale-de.json === deutsche Sprachdatei, locale-en.json === englische Sprachdatei. Angular-translate lädt dann bei Bedarf die Sprachdatei vom Server. Als Standard- und Fallbacksprache ist Englisch ausgewählt.",
    "Q2": "Wie kann der Benutzer seine Sprache ändern?",
    "Q2_TEXT": "Der User kann zur Laufzeit die Sprache ändern (siehe Buttons oben als Beispiel). Dabei wird die ausgewählte Sprache in der Session gespeichert.",
    "Q3": "Wie wird die Sprache dauerhaft geändert?",
    "Q3_TEXT": "Im Administrations-Bereich kann die Standard Sprache des Benutzers gespeichert werden. Beim Start der Anwendung wird die gespeicherte Sprache des Benutzers serverseitig in die Session geschrieben. Auf dem Client wird dann die Sprache aus der Session geladen.",
    "Q4": "Wie werden Datums-, Zahlen- und Währungsformatierungen konfiguriert?",
    "Q4_TEXT": "Für die Datums-, Zahlen- und Währungsformatierungen verwenden wir das Internationalisierungs- und Lokalisierungs-Feature von AngularJS in Verbindung mit dem Modul angular-dynamic-locale. Benötigte Module:",
    "Q4_TEXT2": "Im config Bereich der Angular app wird das Suchpattern der Lokalisierungsdateien festgelegt. Der Teil {locale} ist der Platzhalter für die tatsächlich ausgewählte Sprache.",
    "Q4_TEXT3": "Im run Bereich der Angular app wird auf das $translateChangeSuccess Ereignis reagiert, welches von angular-translate nach dem erfolgreichen ändern der Sprache ausgelöst wird. Dabei übergeben wir angular-dynamic-locale die aktuelle Sprache und diese wird, falls notwendig, vom Server dynamisch nachgeladen.",
    "LOCALIZATION_GERMANY": "Deutschland",
    "NUMBER_FORMAT": "Zahlenformat",
    "CURRENCY_FORMAT": "Währungsformat",
    "DATE_FORMAT": "Datumsformat",
    "SESSION_HEADER": "Beispiel für Sessions in Baboon",
    "SESSION_INTRO": "Sessions werden in Baboon vom Server mit den Parametern aus der config.js erzeugt und verwaltet. Das baboon-client Modul bbc.session beinhaltet einen Service, welcher mit der Serversession interagieren kann. Dies kann genutzt werden um den Server Aktivität zu melden und Daten vom Client aus in der Session zu speichern.",
    "SESSION_LIST_HEADER": "Methoden des Sessionservices",
    "SESSION_LIST_1": "Aktivität der Session melden",
    "SESSION_LIST_2": "Letzte Aktivität abfragen",
    "SESSION_LIST_3": "Daten in der Session speichern",
    "SESSION_LIST_4": "Daten aus der Session laden",
    "SESSION_LIST_5": "Daten aus der Session löschen",
    "SESSION_SETACTIVITY_HEADER": "Meldet neue Aktivität an den Server",
    "SESSION_SETACTIVITY_TEXT": "Aktivität an den Server melden. Der Server prüft die Session auf Inaktivität und Maximale Lebensdauer. Ist eine dieser Zeiten überschritten, sendet der Server dem Client im Callback einen Fehler. Ist die Session ok, verwendet der Server die aktuelle Serverzeit und speichert diese als letzte Aktivität.",
    "SESSION_GETLASTACTIVITY_HEADER": "Letzte Aktivität der Session abfragen",
    "SESSION_GETLASTACTIVITY_TEXT": "Die letzte Aktivität der Session abfragen. Dabei wird die Session nicht erneut überprüft und keine neue Aktivität gesetzt. Es wird ein in ISO formatierter Datumsstring zurück geliefert.",
    "SESSION_SETDATA_HEADER": "Daten im Session-Container speichern",
    "SESSION_SETDATA_TEXT": "Sie können über den Session-Service vom Client aus Daten in der Serversession speichern. Baboon verwendet zum speichern in der Session den Container data. Alle Daten vom Client werden innerhalb des Containers session.data abgelegt und können auch nur aus diesem gelesen und gelöscht werden. Speichern außerhalb des Containers ist nicht möglich. Ist der Key in der Session bereits vergeben, wird der Wert mit dem neuen Wert überschrieben. Beachten Sie daher den Aufbau Ihrer Namen für Keys und verwenden Sie wenn möglich einen Namespace.",
    "SESSION_GETDATA_HEADER": "Daten aus dem Session-Container lesen",
    "SESSION_GETDATA_TEXT": "Sie können über den Session-Service vom Client aus Daten aus der Serversession auslesen. Verwenden Sie dazu den Key unter welchem Sie die Daten gespeichert haben. Sie können Daten, die außerhalb des Containers liegen, nicht abfragen.",
    "SESSION_GETDATA_TEXT2": "Wenn Sie keinen Key angeben, wird Ihnen das gesamte Session Container Objekt zurück geliefert.",
    "SESSION_DELETEDATA_HEADER": "Daten aus dem Session-Container löschen",
    "SESSION_DELETEDATA_TEXT": "Sie können über den Session-Service vom Client aus Daten aus der Serversession löschen. Verwenden Sie dazu den Key unter welchem Sie die Daten gespeichert haben. Sie können Daten, die außerhalb des Containers liegen, nicht löschen.",
    "SESSION_DELETEDATA_TEXT2": "Wenn Sie keinen Key angeben, wird das gesamte Session Container Objekt gelöscht."
}